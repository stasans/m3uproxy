name: Build and Release

on:
  push:
    tags:
      - "v*" # Trigger on tags that start with 'v'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.23.4

      - name: Get version
        id: get_version
        run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      # Build Go binaries for various platforms
      - name: Build for Linux
        run: |
          go build -o m3uproxy server/main.go
          go build -o m3uproxycli cli/main.go
          zip m3uproxy-linux-x64.zip m3uproxy m3uproxycli
        env:
          GOOS: linux
          GOARCH: amd64

      - name: Build for Windows
        run: |
          go build -o m3uproxy.exe server/main.go
          go build -o m3uproxycli.exe cli/main.go
          zip m3uproxy-windows.zip m3uproxy m3uproxycli
        env:
          GOOS: windows
          GOARCH: amd64

      - name: Build for macOS (Intel)
        run: |
          go build -o m3uproxy server/main.go
          go build -o m3uproxycli cli/main.go
          zip m3uproxy-darwin-x64.zip m3uproxy m3uproxycli
        env:
          GOOS: darwin
          GOARCH: amd64

      - name: Build for macOS (Apple Silicon)
        run: |
          go build -o m3uproxy server/main.go
          go build -o m3uproxycli cli/main.go
          zip m3uproxy-darwin-arm64.zip m3uproxy m3uproxycli
        env:
          GOOS: darwin
          GOARCH: arm64

      # Step to build and package the React SPA
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 18

      - name: Install Node.js dependencies
        run: |
          cd player
          npm install

      - name: Build and zip the SPA
        run: |
          cd player
          npm run build
          zip -jr ../player.zip dist/

      # Create a new release
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          release_name: Release ${{ steps.get_version.outputs.version }}
          draft: false
          prerelease: false

      # Upload the Go binaries as assets
      - name: Upload for Linux
        id: upload_assets_linux_x64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: m3uproxy-linux-x64.zip
          asset_name: m3uproxy-${{ steps.get_version.outputs.version }}-linux-x64.zip
          asset_content_type: application/octet-stream

      - name: Upload for Windows
        id: upload_assets_windows
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: m3uproxy-windows.zip
          asset_name: m3uproxy-${{ steps.get_version.outputs.version }}-windows.zip
          asset_content_type: application/octet-stream

      - name: Upload for macOS (Intel)
        id: upload_assets_darwin_intel
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: m3uproxy-darwin-x64.zip
          asset_name: m3uproxy-${{ steps.get_version.outputs.version }}-darwin-x64.zip
          asset_content_type: application/octet-stream

      - name: Upload for macOS (Apple Silicon)
        id: upload_assets_darwin_arm64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: m3uproxy-darwin-arm64.zip
          asset_name: m3uproxy-${{ steps.get_version.outputs.version }}-darwin-arm64.zip
          asset_content_type: application/octet-stream

      # Upload the SPA as a release asset
      - name: Upload SPA
        id: upload_spa
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: player.zip
          asset_name: player-${{ steps.get_version.outputs.version }}.zip
          asset_content_type: application/zip

  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            a13labs/m3uproxy
          tags: |
            type=schedule
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=sha

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
